Probes in Kubernetes are mechanisms that allow the kubelet to check the health and readiness of containers. There are three types of probes:



1. **Liveness Probes:** Determine if a container is running. If a liveness probe fails, Kubernetes will kill the container, and it will be subjected to its restart policy.

2. **Readiness Probes:** Determine if a container is ready to start accepting traffic. If a readiness probe fails, the endpoints controller removes the Pod’s IP address from the endpoints of all Services that match the Pod. 

3. **Startup Probes:** Used to check if the application within the container has started. If the startup probe fails, Kubernetes will kill the container and follow the restart policy. If no startup probe is defined, the liveness probe will be used to check the startup state.

### Types of Probes

#### 1. **Liveness Probes**

- **Purpose:** To check if the application running in the container is alive. If the application is not responding, the container is restarted.
- **Configuration Example:**
  ```yaml
  livenessProbe:
    httpGet:
      path: /healthz
      port: 8080
    initialDelaySeconds: 3
    periodSeconds: 3
  ```

#### 2. **Readiness Probes**

- **Purpose:** To check if the application is ready to accept traffic. If the application is not ready, the container is removed from the Service load balancers.
- **Configuration Example:**
  ```yaml
  readinessProbe:
    httpGet:
      path: /ready
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
  ```

#### 3. **Startup Probes**

- **Purpose:** To check if the application has started. Useful for slow-starting applications. If the startup probe fails, the container is killed and restarted according to the restart policy.
- **Configuration Example:**
  ```yaml
  startupProbe:
    httpGet:
      path: /startup
      port: 8080
    initialDelaySeconds: 10
    periodSeconds: 10
  ```

### Probe Configuration Parameters

- **httpGet:** Performs an HTTP GET request. The probe is considered successful if the response has a status code between 200 and 399.
  ```yaml
  httpGet:
    path: /healthz
    port: 8080
  ```

- **tcpSocket:** Performs a TCP check against the container’s IP address on a specified port. The probe is considered successful if the port is open.
  ```yaml
  tcpSocket:
    port: 8080
  ```

- **exec:** Executes a command inside the container. The probe is considered successful if the command exits with a status code of 0.
  ```yaml
  exec:
    command:
      - cat
      - /tmp/healthy
  ```

- **initialDelaySeconds:** The number of seconds after the container has started before the probe is initiated.
- **periodSeconds:** How often (in seconds) to perform the probe.
- **timeoutSeconds:** Number of seconds after which the probe times out.
- **successThreshold:** Minimum consecutive successes for the probe to be considered successful after having failed.
- **failureThreshold:** When a probe fails, Kubernetes will try `failureThreshold` times before giving up.

### Example Pod Specification with Probes

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: myapp
spec:
  containers:
  - name: myapp-container
    image: myapp:latest
    livenessProbe:
      httpGet:
        path: /healthz
        port: 8080
      initialDelaySeconds: 3
      periodSeconds: 3
    readinessProbe:
      httpGet:
        path: /ready
        port: 8080
      initialDelaySeconds: 5
      periodSeconds: 5
    startupProbe:
      httpGet:
        path: /startup
        port: 8080
      initialDelaySeconds: 10
      periodSeconds: 10
```

In this example:
- The liveness probe checks `/healthz` every 3 seconds after an initial delay of 3 seconds.
- The readiness probe checks `/ready` every 5 seconds after an initial delay of 5 seconds.
- The startup probe checks `/startup` every 10 seconds after an initial delay of 10 seconds.

By using probes, Kubernetes ensures that your application remains healthy and can handle traffic properly, restarting containers or removing them from service endpoints as necessary based on their health and readiness status.